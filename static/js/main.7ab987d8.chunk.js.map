{"version":3,"sources":["components/Form/Form.module.css","components/Contacts/Contacts.module.css","components/Filter/Filter.module.css","redux/contacts/contacts-slice.js","components/Form/Form.jsx","redux/contacts/contacts-selectors.js","components/Contacts/Contacts.jsx","redux/contacts/filter-slice.js","components/Filter/Filter.jsx","components/App.jsx","redux/store.js","index.js"],"names":["module","exports","contactsApi","createApi","reducerPath","baseQuery","fetchBaseQuery","baseUrl","tagTypes","endpoints","builder","fetchContacts","query","providesTags","deleteContact","mutation","contactId","url","method","invalidatesTags","createContact","newContact","body","useFetchContactsQuery","useDeleteContactMutation","useCreateContactMutation","Form","useState","name","setName","number","setNumber","isLoading","contacts","data","handleInputChange","evt","currentTarget","value","className","css","title","onSubmit","preventDefault","some","contact","toLowerCase","alert","signin","signinInput","type","onChange","pattern","required","placeholder","signinButton","disabled","getFilter","state","filter","Contacts","onDelete","deleting","filterValue","useSelector","contactsFilter","includes","map","item","text","button","onClick","id","filterSlice","createSlice","initialState","reducers","action","payload","actions","Filter","dispatch","useDispatch","input","target","App","isFetching","isDeleting","color","height","width","timeout","store","getDefaultMiddleware","logger","configureStore","reducer","middleware","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.7ab987d8.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"signin\":\"Form_signin__cPSGf\",\"signinInput\":\"Form_signinInput__3r248\",\"signinButton\":\"Form_signinButton__2ddC7\",\"signinIinput\":\"Form_signinIinput__1uJcn\",\"signinText\":\"Form_signinText__fufzD\",\"title\":\"Form_title__3EvqE\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"title\":\"Contacts_title__5WLfC\",\"text\":\"Contacts_text__3-VCZ\",\"item\":\"Contacts_item__Zdeng\",\"button\":\"Contacts_button__2iho2\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"input\":\"Filter_input__16sA6\",\"text\":\"Filter_text___tVcB\"};","import { createApi, fetchBaseQuery } from '@reduxjs/toolkit/query/react'\r\n\r\nexport const contactsApi = createApi({\r\n  reducerPath: 'contactsApi',\r\n  baseQuery: fetchBaseQuery({ baseUrl: 'https://616b374416c3fa001717162e.mockapi.io/api/v1/' }),\r\n  tagTypes: ['Contact'],\r\n  endpoints: (builder) => ({\r\n    fetchContacts: builder.query({\r\n      query: () => `/contacts`,\r\n      providesTags: ['Contact'],\r\n    }),\r\n    deleteContact: builder.mutation({\r\n      query: (contactId) => ({\r\n        url: `/contacts/${contactId}`,\r\n        method: 'DELETE',\r\n      }),\r\n      invalidatesTags: ['Contact'],\r\n    }),\r\n    createContact: builder.mutation({\r\n      query: newContact => ({\r\n        url: '/contacts',\r\n        method: 'POST',\r\n        body: newContact,\r\n      }),\r\n      invalidatesTags: ['Contact'],\r\n    }),\r\n  }),\r\n})\r\n\r\nexport const { useFetchContactsQuery, useDeleteContactMutation, useCreateContactMutation } = contactsApi;","import React, { useState } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport {\r\n  useCreateContactMutation,\r\n  useFetchContactsQuery,\r\n} from \"../../redux/contacts/contacts-slice\";\r\nimport css from \"../Form/Form.module.css\";\r\n\r\nexport default function Form() {\r\n  const [name, setName] = useState(\"\");\r\n  const [number, setNumber] = useState(\"\");\r\n  const [createContact, { isLoading }] = useCreateContactMutation();\r\n  const { data: contacts } = useFetchContactsQuery();\r\n\r\n  const handleInputChange = (evt) => {\r\n    const { name, value } = evt.currentTarget;\r\n\r\n    switch (name) {\r\n      case \"name\":\r\n        setName(value);\r\n        break;\r\n\r\n      case \"number\":\r\n        setNumber(value);\r\n        break;\r\n\r\n      default:\r\n        return;\r\n    }\r\n  };\r\n\r\n  const handleSubmit = (evt) => {\r\n    evt.preventDefault();\r\n\r\n    const formSubmitHandler = contacts.some(\r\n      (contact) => contact.name.toLowerCase() === name.toLowerCase()\r\n    );\r\n\r\n    if (formSubmitHandler) {\r\n      return alert(`${name} is already exists in contact list`);\r\n    }\r\n\r\n    if (name === \"\" || number === \"\") {\r\n      // dispatch(contactsActions.addContacts(name, number));\r\n      return alert(\"fill out the form\");\r\n    }\r\n    createContact({ name, number });\r\n    setName(\"\");\r\n    setNumber(\"\");\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <h1 className={css.title}>Phonebook</h1>\r\n      <form onSubmit={handleSubmit} className={css.signin}>\r\n        <input\r\n          className={css.signinInput}\r\n          type=\"text\"\r\n          name=\"name\"\r\n          value={name}\r\n          onChange={handleInputChange}\r\n          pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\r\n          title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\r\n          required\r\n          placeholder=\"name\"\r\n        />\r\n\r\n        <input\r\n          className={css.signinInput}\r\n          type=\"tel\"\r\n          name=\"number\"\r\n          value={number}\r\n          onChange={handleInputChange}\r\n          pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\r\n          title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\r\n          required\r\n          placeholder=\"number\"\r\n        />\r\n\r\n        <button className={css.signinButton} type=\"submit\" disabled={isLoading}>\r\n          Add contact\r\n        </button>\r\n      </form>\r\n    </>\r\n  );\r\n}\r\n\r\nForm.propTypes = {\r\n  contacts: PropTypes.arrayOf(\r\n    PropTypes.shape({\r\n      name: PropTypes.string,\r\n      number: PropTypes.string,\r\n    }).isRequired\r\n  ),\r\n};\r\n","export const getContacts = state => state.contacts;\nexport const getFilter = state => state.filter;\n\n// export const getVisibleContacts = state => {\n//   const contacts = getContacts(state);\n//   const filter = getFilter(state);\n//   const normalizedFilter = filter.toLowerCase();\n//   return contacts.filter(contact => contact.name.toLowerCase().includes(normalizedFilter));\n// };","import PropTypes from \"prop-types\";\r\nimport { useSelector } from \"react-redux\";\r\n// import { getVisibleContacts } from \"../../redux/contacts/contacts-selectors\";\r\nimport { getFilter } from \"../../redux/contacts/contacts-selectors\";\r\nimport { useFetchContactsQuery } from \"../../redux/contacts/contacts-slice\";\r\nimport css from \"../Contacts/Contacts.module.css\";\r\n\r\nconst Contacts = ({ onDelete, deleting }) => {\r\n  const { data: Contacts } = useFetchContactsQuery();\r\n  const filterValue = useSelector((state) => getFilter(state));\r\n  const contactsFilter = Contacts?.filter((contact) =>\r\n    contact.name.toLowerCase().includes(filterValue.toLowerCase())\r\n  );\r\n  // const dispatch = useDispatch();\r\n  // const contacts = useSelector(getVisibleContacts);\r\n\r\n  // const onClick = (id) => dispatch(contactsActions.deleteContacts(id));\r\n\r\n  return (\r\n    <>\r\n      <h2 className={css.title}>Contacts</h2>\r\n      <ul>\r\n        {Contacts &&\r\n          contactsFilter.map((contact) => (\r\n            <li className={css.item} key={contact.id}>\r\n              <p className={css.text}>\r\n                {contact.name}: {contact.number}\r\n              </p>\r\n              <button\r\n                className={css.button}\r\n                onClick={() => onDelete(contact.id)}\r\n                type=\"button\"\r\n              >\r\n                {deleting ? \"Deleting...\" : \"Delete\"}\r\n              </button>\r\n            </li>\r\n          ))}\r\n      </ul>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Contacts;\r\n\r\nContacts.propTypes = {\r\n  contacts: PropTypes.arrayOf(\r\n    PropTypes.shape({\r\n      id: PropTypes.string.isRequired,\r\n      name: PropTypes.string.isRequired,\r\n      number: PropTypes.string.isRequired,\r\n    }).isRequired\r\n  ).isRequired,\r\n};\r\n","import { createSlice } from \"@reduxjs/toolkit\";\r\n\r\nconst initialState = '';\r\n\r\nconst filterSlice = createSlice({\r\n  name: \"contacts/filter\",\r\n  initialState,\r\n  reducers: {\r\n    filter: (state, action) => (state = action.payload),\r\n  },\r\n});\r\nexport const { filter } = filterSlice.actions;\r\nexport default filterSlice.reducer;","import PropTypes from \"prop-types\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { getFilter } from \"../../redux/contacts/contacts-selectors\";\r\nimport { filter } from \"../../redux/contacts/filter-slice\";\r\nimport css from \"../../components/Filter/Filter.module.css\";\r\n\r\nconst Filter = () => {\r\n  const value = useSelector(getFilter);\r\n  const dispatch = useDispatch();\r\n\r\n  return (\r\n    <>\r\n      <label className={css.text}>\r\n        Find contacts by name\r\n        <input\r\n          className={css.input}\r\n          type=\"text\"\r\n          name=\"filter\"\r\n          value={value}\r\n          onChange={(evt) => dispatch(filter(evt.target.value))}\r\n        />\r\n      </label>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Filter;\r\n\r\nFilter.propTypes = {\r\n  value: PropTypes.string.isRequired,\r\n  onChange: PropTypes.func.isRequired,\r\n};\r\n","import Form from \"../components/Form/Form\";\nimport Contacts from \"../components/Contacts/Contacts\";\nimport Filter from \"../components/Filter/Filter\";\nimport {\n  useFetchContactsQuery,\n  useDeleteContactMutation,\n  useCreateContactMutation,\n} from \"../redux/contacts/contacts-slice\";\nimport Loader from \"react-loader-spinner\";\nimport css from \"../../src/App.css\";\n\nexport default function App() {\n  const { data: contacts, isFetching } = useFetchContactsQuery();\n  const [deleteContact, { isLoading: isDeleting }] = useDeleteContactMutation();\n\n  return (\n    <>\n      <Form />\n      <Filter />\n      {isFetching && (\n        <Loader\n          type=\"Circles\"\n          color=\"#00BFFF\"\n          height={100}\n          width={100}\n          timeout={3000}\n        />\n      )}\n      {contacts && (\n        <Contacts\n          contacts={contacts}\n          onDelete={deleteContact}\n          deleting={isDeleting}\n        />\n      )}\n    </>\n  );\n}\n","import { configureStore, getDefaultMiddleware } from '@reduxjs/toolkit';\nimport logger from 'redux-logger';\nimport {contactsApi} from './contacts/contacts-slice';\nimport filter from '../redux/contacts/filter-slice';\n\nconst middleware = [...getDefaultMiddleware(), logger];\n\nconst store = configureStore({\n  reducer: {\n    // contacts: contactsReducer,\n    [contactsApi.reducerPath]: contactsApi.reducer, \n    filter,\n  },\n  middleware: getDefaultMiddleware => [\n    ...getDefaultMiddleware(),\n    contactsApi.middleware,\n  ],\n});\n\nexport default store;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport { Provider } from 'react-redux';\nimport store from './redux/store';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}